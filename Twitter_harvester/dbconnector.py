# -*- coding: utf-8 -*-
"""dbconnection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IcSn5z9Hp5urBG4wYKGFZD5tDjccfVkj
"""

import couchdb
import json
import time
import random

class Couch:
    # Establishing Connection with database
    def __init__(self,ip,dbnamelist):
        couchserver=couchdb.Server(url=ip)
        couchserver.resource.credentials=('admin','Fedrer@17')
        print("hello")
        # Variable to store database objects
        self.db=[]
        # Pre requisite db
        dbsl=['tweet_keys','regions']
        # Reading master node ip address
        #f=open("ip.txt", "r")
        #couchdb_master_ip=f.readline().rstrip()
        couchdb_master_login_url='http://admin:Fedrer@17@127.0.0.1:5984/'
        # Reading other node ip to enable replication
        #db_children=f.readlines()
        #f.close()
        # Creating or loading db
        for dbname in dbsl:
            self.db=self.db+[self.createdb(couchserver,dbname)]
            
        for dbname in dbnamelist:
            self.db=self.db+[self.createdb(couchserver,dbname)]
  
        # Adding static data to db
        self.create_static()

    # Creating db if it does not exist, else loading it
    def createdb(self,couchserver,dbname):
        if dbname in couchserver:
            return couchserver[dbname]
        else:
            return couchserver.create(dbname)

    # Adding static data to db needed by harvestor
    def create_static(self):
        region_file=open('region.json')
        for i in region_file.readlines():
            a=json.loads(i)
            try:
                self.pushdata(a,'region')
            except:
                pass
        # key_file=open('tweetkeys.json')
        # for i in key_file.readlines():
        #     b=json.loads(i)
        #     try:
        #         self.pushdata(b,'tweet_keys')
        #     except:
        #         pass
        

    # Pushing cleaned tweets along with their sentiment to the database
    def pushdata(self,data,dbname):
       
        for i in self.db:
            if dbname==i._name:
                i.save(data)
                break
            else:
                print(dbname+" does not exist")
        

    # Fetching data and setting lock or flag on item
    def getdata(self,dbname):
        while True:
            for i in self.db:
                if dbname==i._name:
                        # Randomly reading data item so that each item is read aprox equal number of times
                        r=str(random.randint(1,19))
                        harvest_obj=i.get(r)
                            try:
                                i.save(harvest_obj)
                                print("id: ",r,i._name)
                                return harvest_obj
                            except:
                                print("id: ",r," wait: 15 sec sleep")
                                time.sleep(15)
                                pass